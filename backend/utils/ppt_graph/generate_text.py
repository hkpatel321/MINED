import google.generativeai as genai
import fitz  # PyMuPDF for PDF text extraction
import re
import json
import matplotlib.pyplot as plt
import pandas as pd
from pptx import Presentation
from pptx.util import Inches
from pptx.dml.color import RGBColor
from io import BytesIO

# Configure Gemini API
genai.configure(api_key="AIzaSyA89k5hXXUUTCfspG2sArvAS74hpw7vv5c")

def extract_text_from_pdf(pdf_path):
    """Extracts text from a PDF file."""
    doc = fitz.open("research_paper.pdf")
    text = ""
    for page in doc:
        text += page.get_text("text") + "\n"
    return text

def extract_numerical_data(text):
    """Extracts numerical/statistical data from text using regex."""
    numbers = re.findall(r'[\d]+(?:\.\d+)?', text)  # Finds numbers (including decimals)
    return numbers

def generate_summary(text):
    """Uses Gemini Pro API to generate a summary from extracted text."""
    model = genai.GenerativeModel("gemini-pro")
    response = model.generate_content(f"Summarize this research paper:\n{text}")
    return response.text

def generate_graphs(data):
    """Generates a bar chart from extracted numerical data."""
    if not data:
        return None
    
    # Convert data to a Pandas DataFrame
    df = pd.DataFrame({'Value': [float(num) for num in data[:10]]})  # Using first 10 numbers for visualization

    # Create a bar chart
    plt.figure(figsize=(6, 4))
    df['Value'].plot(kind='bar', color='skyblue')
    plt.xlabel("Index")
    plt.ylabel("Value")
    plt.title("Statistical Data Visualization")
    
    # Save the chart as an image in memory
    img_bytes = BytesIO()
    plt.savefig(img_bytes, format='png')
    img_bytes.seek(0)
    
    return img_bytes

def create_ppt(summary_text, graph_img, filename="Graphical_Abstract.pptx"):
    """Creates a PowerPoint presentation with text and graphical representation."""
    prs = Presentation()

    # Title Slide
    slide_layout = prs.slide_layouts[0]  # Title Slide Layout
    slide = prs.slides.add_slide(slide_layout)
    title = slide.shapes.title
    subtitle = slide.placeholders[1]
    title.text = "Graphical Abstract"
    subtitle.text = "Generated by AI"

    # Content Slide with Summary
    slide_layout = prs.slide_layouts[1]  # Title & Content Layout
    slide = prs.slides.add_slide(slide_layout)
    title = slide.shapes.title
    content = slide.placeholders[1]
    title.text = "Research Summary"
    content.text = summary_text

    # Slide with Graph
    if graph_img:
        slide = prs.slides.add_slide(slide_layout)
        title = slide.shapes.title
        title.text = "Graphical Data"
        
        # Add Image
        left = Inches(1)
        top = Inches(2)
        width = Inches(6)
        height = Inches(4)
        slide.shapes.add_picture(graph_img, left, top, width, height)

    # Save PowerPoint
    prs.save(filename)
    print(f"Presentation saved as {filename}")

# Example Usage
pdf_path = "research_paper.pdf"  # Change to your PDF file
text = extract_text_from_pdf(pdf_path)
numbers = extract_numerical_data(text)
summary = generate_summary(text)
graph_image = generate_graphs(numbers)

# Generate PowerPoint
create_ppt(summary, graph_image)